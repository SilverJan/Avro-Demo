/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package de.silver.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Order extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5366395671601113794L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Order\",\"namespace\":\"de.silver.avro\",\"fields\":[{\"name\":\"customerId\",\"type\":[\"string\",\"null\"]},{\"name\":\"productId\",\"type\":\"string\"},{\"name\":\"nrOfItems\",\"type\":[\"int\",\"null\"]},{\"name\":\"comment\",\"type\":[\"string\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence customerId;
  @Deprecated public java.lang.CharSequence productId;
  @Deprecated public java.lang.Integer nrOfItems;
  @Deprecated public java.lang.CharSequence comment;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Order() {}

  /**
   * All-args constructor.
   */
  public Order(java.lang.CharSequence customerId, java.lang.CharSequence productId, java.lang.Integer nrOfItems, java.lang.CharSequence comment) {
    this.customerId = customerId;
    this.productId = productId;
    this.nrOfItems = nrOfItems;
    this.comment = comment;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return customerId;
    case 1: return productId;
    case 2: return nrOfItems;
    case 3: return comment;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: customerId = (java.lang.CharSequence)value$; break;
    case 1: productId = (java.lang.CharSequence)value$; break;
    case 2: nrOfItems = (java.lang.Integer)value$; break;
    case 3: comment = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'customerId' field.
   */
  public java.lang.CharSequence getCustomerId() {
    return customerId;
  }

  /**
   * Sets the value of the 'customerId' field.
   * @param value the value to set.
   */
  public void setCustomerId(java.lang.CharSequence value) {
    this.customerId = value;
  }

  /**
   * Gets the value of the 'productId' field.
   */
  public java.lang.CharSequence getProductId() {
    return productId;
  }

  /**
   * Sets the value of the 'productId' field.
   * @param value the value to set.
   */
  public void setProductId(java.lang.CharSequence value) {
    this.productId = value;
  }

  /**
   * Gets the value of the 'nrOfItems' field.
   */
  public java.lang.Integer getNrOfItems() {
    return nrOfItems;
  }

  /**
   * Sets the value of the 'nrOfItems' field.
   * @param value the value to set.
   */
  public void setNrOfItems(java.lang.Integer value) {
    this.nrOfItems = value;
  }

  /**
   * Gets the value of the 'comment' field.
   */
  public java.lang.CharSequence getComment() {
    return comment;
  }

  /**
   * Sets the value of the 'comment' field.
   * @param value the value to set.
   */
  public void setComment(java.lang.CharSequence value) {
    this.comment = value;
  }

  /**
   * Creates a new Order RecordBuilder.
   * @return A new Order RecordBuilder
   */
  public static de.silver.avro.Order.Builder newBuilder() {
    return new de.silver.avro.Order.Builder();
  }
  
  /**
   * Creates a new Order RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Order RecordBuilder
   */
  public static de.silver.avro.Order.Builder newBuilder(de.silver.avro.Order.Builder other) {
    return new de.silver.avro.Order.Builder(other);
  }
  
  /**
   * Creates a new Order RecordBuilder by copying an existing Order instance.
   * @param other The existing instance to copy.
   * @return A new Order RecordBuilder
   */
  public static de.silver.avro.Order.Builder newBuilder(de.silver.avro.Order other) {
    return new de.silver.avro.Order.Builder(other);
  }
  
  /**
   * RecordBuilder for Order instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Order>
    implements org.apache.avro.data.RecordBuilder<Order> {

    private java.lang.CharSequence customerId;
    private java.lang.CharSequence productId;
    private java.lang.Integer nrOfItems;
    private java.lang.CharSequence comment;

    /** Creates a new Builder */
    private Builder() {
      super(de.silver.avro.Order.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(de.silver.avro.Order.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.customerId)) {
        this.customerId = data().deepCopy(fields()[0].schema(), other.customerId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.productId)) {
        this.productId = data().deepCopy(fields()[1].schema(), other.productId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.nrOfItems)) {
        this.nrOfItems = data().deepCopy(fields()[2].schema(), other.nrOfItems);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.comment)) {
        this.comment = data().deepCopy(fields()[3].schema(), other.comment);
        fieldSetFlags()[3] = true;
      }
    }
    
    /**
     * Creates a Builder by copying an existing Order instance
     * @param other The existing instance to copy.
     */
    private Builder(de.silver.avro.Order other) {
            super(de.silver.avro.Order.SCHEMA$);
      if (isValidValue(fields()[0], other.customerId)) {
        this.customerId = data().deepCopy(fields()[0].schema(), other.customerId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.productId)) {
        this.productId = data().deepCopy(fields()[1].schema(), other.productId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.nrOfItems)) {
        this.nrOfItems = data().deepCopy(fields()[2].schema(), other.nrOfItems);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.comment)) {
        this.comment = data().deepCopy(fields()[3].schema(), other.comment);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'customerId' field.
      * @return The value.
      */
    public java.lang.CharSequence getCustomerId() {
      return customerId;
    }

    /**
      * Sets the value of the 'customerId' field.
      * @param value The value of 'customerId'.
      * @return This builder.
      */
    public de.silver.avro.Order.Builder setCustomerId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.customerId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'customerId' field has been set.
      * @return True if the 'customerId' field has been set, false otherwise.
      */
    public boolean hasCustomerId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'customerId' field.
      * @return This builder.
      */
    public de.silver.avro.Order.Builder clearCustomerId() {
      customerId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'productId' field.
      * @return The value.
      */
    public java.lang.CharSequence getProductId() {
      return productId;
    }

    /**
      * Sets the value of the 'productId' field.
      * @param value The value of 'productId'.
      * @return This builder.
      */
    public de.silver.avro.Order.Builder setProductId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.productId = value;
      fieldSetFlags()[1] = true;
      return this; 
    }

    /**
      * Checks whether the 'productId' field has been set.
      * @return True if the 'productId' field has been set, false otherwise.
      */
    public boolean hasProductId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'productId' field.
      * @return This builder.
      */
    public de.silver.avro.Order.Builder clearProductId() {
      productId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'nrOfItems' field.
      * @return The value.
      */
    public java.lang.Integer getNrOfItems() {
      return nrOfItems;
    }

    /**
      * Sets the value of the 'nrOfItems' field.
      * @param value The value of 'nrOfItems'.
      * @return This builder.
      */
    public de.silver.avro.Order.Builder setNrOfItems(java.lang.Integer value) {
      validate(fields()[2], value);
      this.nrOfItems = value;
      fieldSetFlags()[2] = true;
      return this; 
    }

    /**
      * Checks whether the 'nrOfItems' field has been set.
      * @return True if the 'nrOfItems' field has been set, false otherwise.
      */
    public boolean hasNrOfItems() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'nrOfItems' field.
      * @return This builder.
      */
    public de.silver.avro.Order.Builder clearNrOfItems() {
      nrOfItems = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'comment' field.
      * @return The value.
      */
    public java.lang.CharSequence getComment() {
      return comment;
    }

    /**
      * Sets the value of the 'comment' field.
      * @param value The value of 'comment'.
      * @return This builder.
      */
    public de.silver.avro.Order.Builder setComment(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.comment = value;
      fieldSetFlags()[3] = true;
      return this; 
    }

    /**
      * Checks whether the 'comment' field has been set.
      * @return True if the 'comment' field has been set, false otherwise.
      */
    public boolean hasComment() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'comment' field.
      * @return This builder.
      */
    public de.silver.avro.Order.Builder clearComment() {
      comment = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Order build() {
      try {
        Order record = new Order();
        record.customerId = fieldSetFlags()[0] ? this.customerId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.productId = fieldSetFlags()[1] ? this.productId : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.nrOfItems = fieldSetFlags()[2] ? this.nrOfItems : (java.lang.Integer) defaultValue(fields()[2]);
        record.comment = fieldSetFlags()[3] ? this.comment : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}
